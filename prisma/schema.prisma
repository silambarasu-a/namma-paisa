generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  CUSTOMER
}

enum TaxMode {
  PERCENTAGE
  FIXED
  HYBRID
}

enum InvestBucket {
  MUTUAL_FUND
  IND_STOCK
  US_STOCK
  CRYPTO
  EMERGENCY_FUND
}

enum ExpenseType {
  EXPECTED
  UNEXPECTED
}

enum SpendCategory {
  NEEDS
  PARTIAL_NEEDS
  AVOID
}

enum SIPFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
  CUSTOM
}

enum EMIFrequency {
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  ANNUALLY
  CUSTOM
}

enum TransactionType {
  ONE_TIME_PURCHASE
  SIP_EXECUTION
  MANUAL_ENTRY
  MANUAL_EDIT
}

enum ExecutionStatus {
  SUCCESS
  FAILED
  PENDING
}

enum LoanType {
  HOME_LOAN
  CAR_LOAN
  PERSONAL_LOAN
  EDUCATION_LOAN
  BUSINESS_LOAN
  GOLD_LOAN
  CREDIT_CARD
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
  OTHER
}

enum MemberCategory {
  FAMILY
  FRIEND
  RELATIVE
  OTHER
}

enum MemberTransactionType {
  GAVE // Money you gave to someone
  OWE // Money you owe to someone
  EXPENSE_PAID_FOR_THEM // You paid expense on their behalf
  EXPENSE_PAID_BY_THEM // They paid expense on your behalf
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  hashedPassword     String
  name               String?
  image              String?
  phoneNumber        String?
  countryCode        String?   @default("+91")
  roles              Role[]    @default([CUSTOMER])
  isBlocked          Boolean   @default(false)
  emailVerified      Boolean   @default(false)
  verificationToken  String?   @unique
  verificationExpiry DateTime?
  recentlyAccessedAt DateTime?
  resetOtp           String?
  resetOtpExpiry     DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  profiles          Profile[]
  taxSettings       TaxSetting[]
  salaries          SalaryHistory[]
  incomes           Income[]
  allocations       InvestmentAllocation[]
  sips              SIP[]
  loans             Loan[]
  accounts          Account[]
  sessions          Session[]
  expenses          Expense[]
  holdings          Holding[]
  expenseBudget     ExpenseBudget?
  monthlySnapshots  MonthlySnapshot[]
  creditCards       CreditCard[]
  transactions      Transaction[]
  sipExecutions     SIPExecution[]
  members           Member[]
  memberTransactions MemberTransaction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String
  displayName String?
  avatarUrl   String?
  phoneNumber String?
  dateOfBirth DateTime?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  panNumber   String?  @unique
  aadharNumber String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model SalaryHistory {
  id            String   @id @default(cuid())
  userId        String
  monthly       Decimal  @db.Decimal(12, 2)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("net_salary_history")
}

model Income {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  title       String
  description String?
  amount      Decimal  @db.Decimal(12, 2)
  category    String   @default("OTHER") // FREELANCE, BONUS, GIFT, INVESTMENT_RETURN, REFUND, OTHER
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  settlementTransaction MemberTransaction? @relation("SettlementIncome")

  @@map("incomes")
}

model TaxSetting {
  id          String   @id @default(cuid())
  userId      String
  mode        TaxMode  @default(PERCENTAGE)
  percentage  Decimal? @db.Decimal(5, 2)
  fixedAmount Decimal? @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tax_settings")
}

model Loan {
  id                  String        @id @default(cuid())
  userId              String
  loanType            LoanType
  institution         String
  accountHolderName   String        @default("") // Name of the account holder
  principalAmount     Decimal       @db.Decimal(12, 2)
  interestRate        Decimal       @db.Decimal(5, 2)
  tenure              Int
  emiAmount           Decimal       @db.Decimal(12, 2)
  emiFrequency        EMIFrequency  @default(MONTHLY)
  customPaymentDay    Int?          // Day of month for custom payments (1-31)
  paymentSchedule     Json?         // Stores payment schedule dates for different frequencies
  startDate           DateTime
  endDate             DateTime?
  currentOutstanding  Decimal       @db.Decimal(12, 2)
  totalPaid           Decimal       @default(0) @db.Decimal(12, 2)
  accountNumber       String?
  description         String?
  currency            String        @default("INR")
  isActive            Boolean       @default(true)
  isClosed            Boolean       @default(false)
  closedAt            DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  emis      EMI[]
  goldItems GoldLoanItem[] // Only for GOLD_LOAN type
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model GoldLoanItem {
  id          String   @id @default(cuid())
  loanId      String
  title       String // Item description (e.g., "Gold Chain", "Gold Ring")
  carat       Int // Carat in K (e.g., 22, 24)
  quantity    Int // Number of items
  grossWeight Decimal  @db.Decimal(10, 3) // Weight in grams
  netWeight   Decimal  @db.Decimal(10, 3) // Net weight in grams
  loanAmount  Decimal? @db.Decimal(12, 2) // Optional loan amount for this item
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("gold_loan_items")
}

model EMI {
  id            String         @id @default(cuid())
  loanId        String
  emiAmount     Decimal        @db.Decimal(12, 2)
  paidAmount    Decimal?       @db.Decimal(12, 2)
  dueDate       DateTime
  paidDate      DateTime?
  principalPaid Decimal?       @db.Decimal(12, 2)
  interestPaid  Decimal?       @db.Decimal(12, 2)
  isPaid        Boolean        @default(false)
  lateFee       Decimal?       @db.Decimal(12, 2)
  paymentMethod PaymentMethod?
  paymentNotes  String?
  receiptUrl    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("emis")
}

model SIP {
  id          String        @id @default(cuid())
  userId      String
  name        String
  amount      Decimal       @db.Decimal(12, 2)
  frequency   SIPFrequency
  customDay   Int? // Day of month for custom SIPs (1-31)
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean       @default(true)
  description String?
  bucket      InvestBucket? // Investment bucket type (optional for backward compatibility)
  symbol      String? // Symbol/scheme code for the investment
  currency    String        @default("INR")
  amountInINR Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions SIPExecution[]

  @@map("sips")
}

model InvestmentAllocation {
  id             String           @id @default(cuid())
  userId         String
  bucket         InvestBucket
  allocationType AllocationType   @default(PERCENTAGE)
  percent        Decimal?         @db.Decimal(5, 2)
  customAmount   Decimal?         @db.Decimal(12, 2)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bucket])
  @@map("investment_allocations")
}

enum AllocationType {
  PERCENTAGE
  AMOUNT
}

model Holding {
  id           String       @id @default(cuid())
  userId       String
  bucket       InvestBucket
  symbol       String
  name         String
  qty          Decimal      @db.Decimal(20, 10)
  avgCost      Decimal      @db.Decimal(18, 10)
  currentPrice Decimal?     @db.Decimal(18, 10)
  currency     String       @default("INR")
  usdInrRate   Decimal?     @db.Decimal(10, 4)
  isManual     Boolean      @default(false) // True if manually added without transaction tracking
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  sipExecutions SIPExecution[]

  @@map("holdings")
}

model Transaction {
  id              String          @id @default(cuid())
  userId          String
  holdingId       String?
  bucket          InvestBucket
  symbol          String
  name            String
  qty             Decimal         @db.Decimal(20, 10)
  price           Decimal         @db.Decimal(18, 10)
  amount          Decimal         @db.Decimal(18, 10) // Transaction amount in currency
  currency        String          @default("INR")
  amountInr       Decimal?        @db.Decimal(18, 10) // Amount in INR (for USD transactions)
  transactionType TransactionType
  purchaseDate    DateTime
  description     String?
  usdInrRate      Decimal?        @db.Decimal(10, 4)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  holding Holding? @relation(fields: [holdingId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model SIPExecution {
  id            String          @id @default(cuid())
  sipId         String
  userId        String
  holdingId     String?
  executionDate DateTime
  amount        Decimal         @db.Decimal(18, 10)
  currency      String          @default("INR")
  amountInr     Decimal?        @db.Decimal(18, 10)
  qty           Decimal?        @db.Decimal(20, 10)
  price         Decimal?        @db.Decimal(18, 10)
  status        ExecutionStatus @default(PENDING)
  errorMessage  String?
  usdInrRate    Decimal?        @db.Decimal(10, 4)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  sip     SIP      @relation(fields: [sipId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  holding Holding? @relation(fields: [holdingId], references: [id], onDelete: SetNull)

  @@map("sip_executions")
}

model ExpenseBudget {
  id              String   @id @default(cuid())
  userId          String
  expectedPercent Decimal? @db.Decimal(5, 2)
  expectedAmount  Decimal? @db.Decimal(12, 2)
  unexpectedPercent Decimal? @db.Decimal(5, 2)
  unexpectedAmount  Decimal? @db.Decimal(12, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("expense_budgets")
}

model CreditCard {
  id              String   @id @default(cuid())
  userId          String
  cardName        String   // e.g., "HDFC Regalia", "Axis Vistara"
  lastFourDigits  String   // Last 4 digits for identification
  bank            String   // Bank name
  billingCycle    Int      // Day of month (1-31) when billing cycle closes
  dueDate         Int      @default(15) // Day of month when payment is due (typically billingCycle + 15-20 days)
  gracePeriod     Int      @default(3) // Grace period in days after due date
  cardNetwork     String?  // Visa, Mastercard, Amex, etc.
  cardLimit       Decimal? @db.Decimal(12, 2)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@map("credit_cards")
}

model Expense {
  id                  String        @id @default(cuid())
  userId              String
  date                DateTime
  title               String
  description         String?
  expenseType         ExpenseType
  category            SpendCategory
  amount              Decimal       @db.Decimal(12, 2)
  needsPortion        Decimal?      @db.Decimal(12, 2)
  avoidPortion        Decimal?      @db.Decimal(12, 2)
  paymentMethod       PaymentMethod @default(CASH)
  creditCardId        String?       // Reference to credit card if payment method is CARD
  paymentDueDate      DateTime?     // When the credit card payment is due (for CARD payment method)
  receiptUrl          String?
  tags                String[]

  // Member tracking - for expenses spent for someone or by someone
  memberId            String?       // Reference to member if expense involves them
  paidByMember        Boolean       @default(false) // True if member paid for you
  paidForMember       Boolean       @default(false) // True if you paid for member

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditCard        CreditCard?  @relation(fields: [creditCardId], references: [id], onDelete: SetNull)
  member            Member?      @relation(fields: [memberId], references: [id], onDelete: SetNull)
  memberTransaction MemberTransaction?
  settlementTransaction MemberTransaction? @relation("SettlementExpense")

  @@map("expenses")
}

model MonthlySnapshot {
  id                String   @id @default(cuid())
  userId            String
  month             Int      // 1-12
  year              Int

  // Salary & Deductions
  salary            Decimal  @db.Decimal(12, 2)
  taxAmount         Decimal  @db.Decimal(12, 2)
  afterTax          Decimal  @db.Decimal(12, 2)

  // Obligations
  totalLoans        Decimal  @db.Decimal(12, 2)
  totalSIPs         Decimal  @db.Decimal(12, 2)

  // Expenses
  totalExpenses     Decimal  @db.Decimal(12, 2)
  expectedExpenses  Decimal  @db.Decimal(12, 2)
  unexpectedExpenses Decimal @db.Decimal(12, 2)
  needsExpenses     Decimal  @db.Decimal(12, 2)
  avoidExpenses     Decimal  @db.Decimal(12, 2)

  // Surplus Calculation
  availableAmount   Decimal  @db.Decimal(12, 2) // afterTax - loans - SIPs
  spentAmount       Decimal  @db.Decimal(12, 2) // total expenses
  surplusAmount     Decimal  @db.Decimal(12, 2) // availableAmount - spentAmount
  plannedSurplus    Decimal  @default(0) @db.Decimal(12, 2) // After scheduled EMI, planned SIPs, and expenses
  cashRemaining     Decimal  @default(0) @db.Decimal(12, 2) // After all actual transactions

  // Carry Forward
  previousSurplus   Decimal  @db.Decimal(12, 2) // Surplus from previous month

  // Investments Made
  investmentsMade   Decimal? @db.Decimal(12, 2)

  // Loan Tracking - JSON structure: [{ loanId, loanType, institution, emiAmount, isPaid, paidDate, dueDate, isClosed, closedAt }]
  loansData         Json?

  // EMI Details
  currentMonthEMIPaid       Decimal  @default(0) @db.Decimal(12, 2) // EMIs paid for current month
  currentMonthEMIUnpaid     Decimal  @default(0) @db.Decimal(12, 2) // EMIs scheduled but not paid for current month
  currentMonthEMIPaidCount  Int      @default(0) // Count of EMIs paid
  currentMonthEMIUnpaidCount Int     @default(0) // Count of EMIs unpaid
  additionalEMIPaid         Decimal  @default(0) @db.Decimal(12, 2) // EMIs paid for other months (old dues/advance)
  additionalEMIPaidCount    Int      @default(0) // Count of additional EMI payments

  // SIP & Investment Details
  totalSIPInvested          Decimal  @default(0) @db.Decimal(12, 2) // Total SIP invested (planned amount)
  sipExecutionsAmount       Decimal  @default(0) @db.Decimal(12, 2) // Actual SIP executions amount
  sipExecutionsCount        Int      @default(0) // Count of successful SIP executions
  oneTimeInvestments        Decimal  @default(0) @db.Decimal(12, 2) // One-time investment purchases
  oneTimeInvestmentsCount   Int      @default(0) // Count of one-time purchases
  additionalTransactions    Decimal  @default(0) @db.Decimal(12, 2) // One-time investments + additional EMI paid

  // Investment Returns
  monthOnMonthSIPProfit     Decimal  @default(0) @db.Decimal(12, 2) // Profit/loss for SIPs invested this month
  monthOnMonthSIPProfitPct  Decimal  @default(0) @db.Decimal(5, 2) // Profit percentage for SIPs
  currentMonthReturns       Decimal  @default(0) @db.Decimal(12, 2) // Returns on all current month investments
  currentMonthReturnsPct    Decimal  @default(0) @db.Decimal(5, 2) // Returns percentage
  overallPortfolioValue     Decimal  @default(0) @db.Decimal(12, 2) // Total portfolio value at month end
  overallPortfolioPnL       Decimal  @default(0) @db.Decimal(12, 2) // Overall portfolio profit/loss
  overallPortfolioPnLPct    Decimal  @default(0) @db.Decimal(5, 2) // Overall portfolio profit/loss percentage

  // Budget Tracking
  plannedExpenses           Decimal  @default(0) @db.Decimal(12, 2) // Budgeted expense amount
  expectedBudget            Decimal  @default(0) @db.Decimal(12, 2) // Expected category budget
  unexpectedBudget          Decimal  @default(0) @db.Decimal(12, 2) // Unexpected category budget
  isUsingBudget             Boolean  @default(false) // Whether budget was configured

  // Loan Lifecycle
  loansAdded                Int      @default(0) // Count of new loans added this month
  loansAddedData            Json?    // Details of new loans: [{ loanId, loanType, institution, principalAmount }]
  loansClosed               Int      @default(0) // Count of loans closed this month
  loansClosedData           Json?    // Details of closed loans: [{ loanId, loanType, institution, closedAt }]

  // Member Transactions
  memberBorrowed            Decimal  @default(0) @db.Decimal(12, 2) // Money you borrowed from members (reduces surplus)
  memberLent                Decimal  @default(0) @db.Decimal(12, 2) // Money you lent to members (adds to surplus)
  memberTransactionsCount   Int      @default(0) // Count of member transactions this month
  memberTransactionsData    Json?    // Details: [{ memberId, memberName, transactionType, amount, date }]

  // Status
  isClosed          Boolean  @default(false) // Whether month is closed
  closedAt          DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month])
  @@map("monthly_snapshots")
}

model SystemSettings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("system_settings")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model Member {
  id            String          @id @default(cuid())
  userId        String
  name          String
  category      MemberCategory
  phoneNumber   String?
  email         String?
  notes         String?
  currentBalance Decimal        @default(0) @db.Decimal(12, 2) // Positive: they owe you, Negative: you owe them
  extraSpent    Decimal         @default(0) @db.Decimal(12, 2) // Extra amount spent during settlements
  extraOwe      Decimal         @default(0) @db.Decimal(12, 2) // Extra amount owed during settlements
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions MemberTransaction[]
  expenses     Expense[]

  @@unique([userId, name]) // Prevent duplicate member names per user
  @@map("members")
}

model MemberTransaction {
  id             String                 @id @default(cuid())
  userId         String
  memberId       String
  transactionType MemberTransactionType
  amount         Decimal                @db.Decimal(12, 2)
  date           DateTime
  description    String?
  paymentMethod  PaymentMethod?
  receiptUrl     String?
  expenseId      String?                @unique // Link to expense if this transaction is from an expense
  isSettled      Boolean                @default(false) // Track if this debt has been settled
  settledDate    DateTime?
  settledAmount  Decimal?               @db.Decimal(12, 2) // Custom settlement amount (if different from original)
  settledNotes   String?
  settlementIncomeId String?             @unique // Link to income created from settlement difference
  settlementExpenseId String?            @unique // Link to expense created from settlement difference
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  member  Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  expense Expense? @relation(fields: [expenseId], references: [id], onDelete: SetNull)
  settlementIncome  Income?  @relation("SettlementIncome", fields: [settlementIncomeId], references: [id], onDelete: SetNull)
  settlementExpense Expense? @relation("SettlementExpense", fields: [settlementExpenseId], references: [id], onDelete: SetNull)

  @@map("member_transactions")
}